{"version":3,"file":"composition.js","names":["Embed","Emitter","Composition","isComposing","isUndoing","constructor","scroll","emitter","setupListeners","domNode","addEventListener","event","inputType","startsWith","batchStart","handleCompositionStart","setTimeout","handleCompositionEnd","batchEnd","blot","target","Node","find","emit","events","COMPOSITION_BEFORE_START","COMPOSITION_START","COMPOSITION_BEFORE_END","COMPOSITION_END"],"sources":["../../src/core/composition.ts"],"sourcesContent":["import Embed from '../blots/embed.js';\nimport type Scroll from '../blots/scroll.js';\nimport Emitter from './emitter.js';\n\nclass Composition {\n  isComposing = false;\n  private isUndoing: boolean = false; // Add this property\n\n  constructor(\n    private scroll: Scroll,\n    private emitter: Emitter,\n  ) {\n    this.setupListeners();\n  }\n\n  private setupListeners() {\n    // On beforeinput: check for destructive actions like delete or undo.\n    // This gives us context before the composition events fire.\n    this.scroll.domNode.addEventListener('beforeinput', (event: InputEvent) => {\n      const inputType = (event as any).inputType;\n      // Check for common input types that represent deletion or undoing history.\n      if (inputType.startsWith('delete') || inputType.startsWith('history')) {\n        this.isUndoing = true;\n      }\n    });\n\n    // On compositionstart: enter batch mode ONLY for genuine compositions.\n    this.scroll.domNode.addEventListener('compositionstart', (event) => {\n      // If a destructive action was just detected, do NOT enter batch mode.\n      // Let Quill handle the deletion synchronously.\n      if (this.isUndoing) {\n        this.isUndoing = false; // Reset the flag\n        return;\n      }\n\n      if (!this.isComposing) {\n        this.isComposing = true;\n        // This is a genuine composition, so we start the batch.\n        this.scroll.batchStart();\n        this.handleCompositionStart(event);\n      }\n    });\n\n    // On compositionend: exit batch mode and apply changes immediately.\n    this.scroll.domNode.addEventListener('compositionend', (event) => {\n      if (this.isComposing) {\n        // Use microtask to wait for DOM update, then flush.\n        setTimeout(() => {\n          this.handleCompositionEnd(event);\n          // This will only be called if batchStart() was called,\n          // which we now prevent for deletions.\n          this.scroll.batchEnd();\n          this.isComposing = false;\n\n          // It's good practice to ensure the isUndoing flag is reset here too,\n          // in case an unusual event sequence occurs.\n          this.isUndoing = false;\n        }, 0);\n      }\n    });\n  }\n\n  private handleCompositionStart(event: CompositionEvent) {\n    const blot =\n      event.target instanceof Node\n        ? this.scroll.find(event.target, true)\n        : null;\n\n    if (blot && !(blot instanceof Embed)) {\n      this.emitter.emit(Emitter.events.COMPOSITION_BEFORE_START, event);\n      this.scroll.batchStart();\n      this.emitter.emit(Emitter.events.COMPOSITION_START, event);\n      this.isComposing = true;\n    }\n  }\n\n  private handleCompositionEnd(event: CompositionEvent) {\n    this.emitter.emit(Emitter.events.COMPOSITION_BEFORE_END, event);\n    this.scroll.batchEnd();\n    this.emitter.emit(Emitter.events.COMPOSITION_END, event);\n    this.isComposing = false;\n  }\n}\n\nexport default Composition;\n"],"mappings":"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","ignoreList":[]}